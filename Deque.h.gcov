        -:    0:Source:Deque.h
        -:    0:Graph:TestDeque.gcno
        -:    0:Data:TestDeque.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// --------------------------
        -:    2:// projects/c++/deque/Deque.h
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// --------------------------
        -:    6:
        -:    7:#ifndef Deque_h
        -:    8:#define Deque_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <algorithm> // copy, equal, lexicographical_compare, max, swap
        -:   15:#include <iostream>  // cout, endls
        -:   16:#include <cassert>   // assert
        -:   17:#include <iterator>  // iterator, bidirectional_iterator_tag
        -:   18:#include <memory>    // allocator
        -:   19:#include <stdexcept> // out_of_range
        -:   20:#include <utility>   // !=, <=, >, >=
        -:   21:
        -:   22:// -----
        -:   23:// using
        -:   24:// -----
        -:   25:
        -:   26:using std::rel_ops::operator!=;
        -:   27:using std::rel_ops::operator<=;
        -:   28:using std::rel_ops::operator>;
        -:   29:using std::rel_ops::operator>=;
        -:   30:
        -:   31:
        -:   32:#define INNER_SIZE 100
        -:   33:
        -:   34:// -------
        -:   35:// destroy
        -:   36:// -------
        -:   37:
        -:   38:template <typename A, typename BI>
function _Z7destroyISaIiEN8my_dequeIiS0_E8iteratorEET0_RT_S4_S4_ called 10 returned 100% blocks executed 100%
       10:   39:BI destroy (A& a, BI b, BI e) {
       58:   40:    while (b != e) {
call    0 returned 100%
branch  1 taken 79%
branch  2 taken 21% (fallthrough)
       38:   41:        --e;
call    0 returned 100%
       38:   42:        a.destroy(&*e);}
call    0 returned 100%
call    1 returned 100%
       10:   43:    return b;}
        -:   44:
        -:   45:// ------------------
        -:   46:// uninitialized_copy
        -:   47:// ------------------
        -:   48:
        -:   49:template <typename A, typename II, typename BI>
function _Z18uninitialized_copyISaIiEN8my_dequeIiS0_E14const_iteratorENS2_8iteratorEET1_RT_T0_S8_S5_ called 24 returned 100% blocks executed 65%
       24:   50:BI uninitialized_copy (A& a, II b, II e, BI x) {
       24:   51:    BI p = x;
        -:   52:    try {
     8140:   53:        while (b != e) {
call    0 returned 100%
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
     8092:   54:            a.construct(&*x, *b);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
     8092:   55:            ++b;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     8092:   56:            ++x;}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    =====:   57:    catch (...) {
call    0 never executed
call    1 never executed
    =====:   58:        destroy(a, p, x);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:   59:        throw;}
call    0 never executed
       24:   60:    return x;}
        -:   61:
        -:   62:// ------------------
        -:   63:// uninitialized_fill
        -:   64:// ------------------
        -:   65:
        -:   66:template <typename A, typename BI, typename U>
function _Z18uninitialized_fillISaIiEN8my_dequeIiS0_E8iteratorEiET0_RT_S4_S4_RKT1_ called 136 returned 100% blocks executed 60%
      136:   67:BI uninitialized_fill (A& a, BI b, BI e, const U& v) {
      136:   68:    BI p = b;
        -:   69:    try {
    18128:   70:        while (b != e) {
call    0 returned 100%
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
    17856:   71:            a.construct(&*b, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:   72:            //std::cout << "v " << v << std::endl;
    17856:   73:            ++b;}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    =====:   74:    catch (...) {
call    0 never executed
call    1 never executed
    =====:   75:        destroy(a, p, b);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:   76:        throw;}
call    0 never executed
      136:   77:    return e;}
        -:   78:
        -:   79:// -------
        -:   80:// my_deque
        -:   81:// -------
        -:   82:
        -:   83:template < typename T, typename A = std::allocator<T> >
        -:   84:class my_deque {
        -:   85:    public:
        -:   86:        // --------
        -:   87:        // typedefs
        -:   88:        // --------
        -:   89:
        -:   90:        typedef A                                        allocator_type;
        -:   91:        typedef typename allocator_type::value_type      value_type;
        -:   92:
        -:   93:        typedef typename allocator_type::size_type       size_type;
        -:   94:        typedef typename allocator_type::difference_type difference_type;
        -:   95:
        -:   96:        typedef typename allocator_type::pointer         pointer;
        -:   97:        typedef typename allocator_type::const_pointer   const_pointer;
        -:   98:
        -:   99:        typedef typename allocator_type::reference       reference;
        -:  100:        typedef typename allocator_type::const_reference const_reference;
        -:  101:
        -:  102:
        -:  103:        typedef typename A::template rebind<pointer>::other      B;
        -:  104:
        -:  105:    public:
        -:  106:        // -----------
        -:  107:        // operator ==
        -:  108:        // -----------
        -:  109:
        -:  110:        /**
        -:  111:         * Compares two my_deques for equality
        -:  112:         * @param my_deque lhs
        -:  113:         * @param my_deque rhs
        -:  114:         * @return boolean 
        -:  115:         */
function _ZeqRK8my_dequeIiSaIiEES3_ called 46 returned 100% blocks executed 100%
       46:  116:        friend bool operator == (const my_deque& lhs, const my_deque& rhs) {
        -:  117:            // <your code>
        -:  118:            // you must use std::equal()
        -:  119:            // The equals is calling the wrong begin & end
        -:  120:            //std::cout << lhs.size() << "    " << rhs.size() << std::endl;
       46:  121:            return (lhs.size() == rhs.size()) && std::equal(lhs.begin(), lhs.end(), rhs.begin());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 75% (fallthrough)
branch  9 taken 25%
        -:  122:            }
        -:  123:
        -:  124:        // ----------
        -:  125:        // operator <
        -:  126:        // ----------
        -:  127:
        -:  128:        /**
        -:  129:         * Compares two my_deques for less than operator
        -:  130:         * @param my_deque lhs
        -:  131:         * @param my_deque rhs
        -:  132:         * @return boolean if lhs < rhs
        -:  133:         */
function _ZltRK8my_dequeIiSaIiEES3_ called 8 returned 100% blocks executed 100%
        8:  134:        friend bool operator < (const my_deque& lhs, const my_deque& rhs) {
        -:  135:            // <your code>
        -:  136:            // you must use std::lexicographical_compare()
        -:  137:            //std::cout << lhs.size() << "    " << rhs.size() << std::endl;
        -:  138:            // if (lhs.size() > rhs.size())
        -:  139:            //     return std::lexicographical_compare(rhs.begin(), rhs.end(), lhs.begin(), lhs.end());
        8:  140:            return std::lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  141:            }
        -:  142:
        -:  143:    private:
        -:  144:        // ----
        -:  145:        // data
        -:  146:        // ----
        -:  147:
        -:  148:        allocator_type _a;
        -:  149:        int OUTER_SIZE;
        -:  150:
        -:  151:        B _balloc; 
        -:  152:
        -:  153:        pointer* outer_b;
        -:  154:        pointer* outer_e;
        -:  155:        pointer _bstart;
        -:  156:        pointer _estart;
        -:  157:        pointer _b;
        -:  158:        pointer _e;
        -:  159:        pointer _l;
        -:  160:
        -:  161:        int _size;
        -:  162:        int _offset;
        -:  163:
        -:  164:        // <your data>
        -:  165:
        -:  166:    private:
        -:  167:        // -----
        -:  168:        // valid
        -:  169:        // -----
        -:  170:
function _ZNK8my_dequeIiSaIiEE5validEv called 1722 returned 100% blocks executed 100%
     1722:  171:        bool valid () const {
        -:  172:            // <your code>
     1722:  173:            return true;
        -:  174:}
        -:  175:
        -:  176:    public:
        -:  177:        // --------
        -:  178:        // iterator
        -:  179:        // --------
        -:  180:
        -:  181:        class iterator {
        -:  182:            public:
        -:  183:                // --------
        -:  184:                // typedefs
        -:  185:                // --------
        -:  186:
        -:  187:                typedef          std::bidirectional_iterator_tag iterator_category;
        -:  188:                typedef typename my_deque::value_type            value_type;
        -:  189:                typedef typename my_deque::difference_type       difference_type;
        -:  190:                typedef typename my_deque::pointer               pointer;
        -:  191:                typedef typename my_deque::reference             reference;
        -:  192:
        -:  193:            public:
        -:  194:                // -----------
        -:  195:                // operator ==
        -:  196:                // -----------
        -:  197:
        -:  198:                /**
        -:  199:                 * @param iterator lhs
        -:  200:                 * @param difference_type rhs
        -:  201:                 * @return true if lhs==rhs, false otherwise
        -:  202:                 */
function _ZeqRKN8my_dequeIiSaIiEE8iteratorES4_ called 18750 returned 100% blocks executed 100%
    18750:  203:                friend bool operator == (const iterator& lhs, const iterator& rhs) {
        -:  204:                    // <your code>
    18750:  205:                    if ((lhs._index == rhs._index) && (lhs._d == rhs._d))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  206:                    {
      194:  207:                        return true;
        -:  208:                    }
    18556:  209:                    return false;}
        -:  210:
        -:  211:                /**
        -:  212:                 * @param iterator lhs
        -:  213:                 * @param difference_type rhs
        -:  214:                 * @return true if lhs!=rhs, false otherwise
        -:  215:                 */
function _ZneRKN8my_dequeIiSaIiEE8iteratorES4_ called 18706 returned 100% blocks executed 100%
    18706:  216:                friend bool operator != (const iterator& lhs, const iterator& rhs) {
    18706:  217:                    return !(lhs == rhs);}
call    0 returned 100%
        -:  218:
        -:  219:                // ----------
        -:  220:                // operator +
        -:  221:                // ----------
        -:  222:
        -:  223:                /**
        -:  224:                 * @param iterator lhs
        -:  225:                 * @param difference_type rhs
        -:  226:                 * @return iterator lhs+rhs
        -:  227:                 */
function _ZplN8my_dequeIiSaIiEE8iteratorEl called 144 returned 100% blocks executed 100%
      144:  228:                friend iterator operator + (iterator lhs, difference_type rhs) {
      144:  229:                    return lhs += rhs;}
call    0 returned 100%
        -:  230:
        -:  231:                // ----------
        -:  232:                // operator -
        -:  233:                // ----------
        -:  234:
        -:  235:                /**
        -:  236:                 * @param iterator lhs
        -:  237:                 * @param difference_type rhs
        -:  238:                 * @return iterator lhs-rhs
        -:  239:                 */
function _ZmiN8my_dequeIiSaIiEE8iteratorEl called 26 returned 100% blocks executed 100%
       26:  240:                friend iterator operator - (iterator lhs, difference_type rhs) {
       26:  241:                    return lhs -= rhs;}
call    0 returned 100%
        -:  242:
        -:  243:            private:
        -:  244:                // ----
        -:  245:                // data
        -:  246:                // ----
        -:  247:
        -:  248:                // <your data>
        -:  249:                my_deque* _d;
        -:  250:                size_type _index;
        -:  251:
        -:  252:            private:
        -:  253:                // -----
        -:  254:                // valid
        -:  255:                // -----
        -:  256:
function _ZNK8my_dequeIiSaIiEE8iterator5validEv called 27672 returned 100% blocks executed 100%
    27672:  257:                bool valid () const {
        -:  258:                    // <your code>
        -:  259:                    if (_index >= 0)
    27672:  260:                        return true;
        -:  261:                    return false;
        -:  262:            }
        -:  263:
        -:  264:            public:
        -:  265:                // -----------
        -:  266:                // constructor
        -:  267:                // -----------
        -:  268:
        -:  269:                /**
        -:  270:                 * iterator constructor
        -:  271:                 * @param my_deque* d
        -:  272:                 * @param size_type s
        -:  273:                 * @return iterator pointing to my_deque d at position s
        -:  274:                 */
function _ZN8my_dequeIiSaIiEE8iteratorC2EPS1_m called 624 returned 100% blocks executed 75%
      624:  275:                iterator (my_deque* d, size_type s) :
        -:  276:
        -:  277:                    _d (d),
      624:  278:                    _index (s){
        -:  279:                    // <your code>
      624:  280:                    assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  281:
        -:  282:                // Default copy, destructor, and copy assignment.
        -:  283:                // iterator (const iterator&);
        -:  284:                // ~iterator ();
        -:  285:                // iterator& operator = (const iterator&);
        -:  286:
        -:  287:                // ----------
        -:  288:                // operator *
        -:  289:                // ----------
        -:  290:
        -:  291:                /**
        -:  292:                 * @return reference at _d[_index]
        -:  293:                 */
function _ZNK8my_dequeIiSaIiEE8iteratordeEv called 27032 returned 100% blocks executed 100%
    27032:  294:                reference operator * () const {
        -:  295:                    // <your code>
        -:  296:                    
    27032:  297:                    return (*_d)[_index];}
call    0 returned 100%
        -:  298:
        -:  299:                // -----------
        -:  300:                // operator ->
        -:  301:                // -----------
        -:  302:
        -:  303:                /**
        -:  304:                 * @return pointer to this object which can be dereferenced as an rvalue
        -:  305:                 */
        -:  306:                pointer operator -> () const {
        -:  307:                    return &**this;}
        -:  308:
        -:  309:                // -----------
        -:  310:                // operator ++
        -:  311:                // -----------
        -:  312:
        -:  313:                /**
        -:  314:                 * prefix ++ 
        -:  315:                 * @return iterator incremented
        -:  316:                 */
function _ZN8my_dequeIiSaIiEE8iteratorppEv called 26800 returned 100% blocks executed 80%
    26800:  317:                iterator& operator ++ () {
        -:  318:                    // <your code>
    26800:  319:                    ++_index;
    26800:  320:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
    26800:  321:                    return *this;}
        -:  322:
        -:  323:                /**
        -:  324:                 * postfix ++
        -:  325:                 * @param int
        -:  326:                 * @return iterator pointing to original value with internal value decremented
        -:  327:                 */
        -:  328:                iterator operator ++ (int) {
        -:  329:                    iterator x = *this;
        -:  330:                    ++(*this);
        -:  331:                    assert(valid());
        -:  332:                    return x;}
        -:  333:
        -:  334:                // -----------
        -:  335:                // operator --
        -:  336:                // -----------
        -:  337:
        -:  338:                /**
        -:  339:                 * prefix --
        -:  340:                 * @return iterator decremented
        -:  341:                 */
function _ZN8my_dequeIiSaIiEE8iteratormmEv called 66 returned 100% blocks executed 80%
       66:  342:                iterator& operator -- () {
        -:  343:                    // <your code>
       66:  344:                    --_index;
       66:  345:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       66:  346:                    return *this;}
        -:  347:
        -:  348:                /**
        -:  349:                 * postfix --
        -:  350:                 * @param int
        -:  351:                 * @return iterator pointing to original value with internal value decremented
        -:  352:                 */
        -:  353:                iterator operator -- (int) {
        -:  354:                    iterator x = *this;
        -:  355:                    --(*this);
        -:  356:                    assert(valid());
        -:  357:                    return x;}
        -:  358:
        -:  359:                // -----------
        -:  360:                // operator +=
        -:  361:                // -----------
        -:  362:
        -:  363:                /**
        -:  364:                 * @param difference_type d
        -:  365:                 * @return iterator to current position + d
        -:  366:                 */
function _ZN8my_dequeIiSaIiEE8iteratorpLEl called 150 returned 100% blocks executed 80%
      150:  367:                iterator& operator += (difference_type d) {
        -:  368:                    // <your code>
      150:  369:                    _index += d;
      150:  370:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
      150:  371:                    return *this;}
        -:  372:
        -:  373:                // -----------
        -:  374:                // operator -=
        -:  375:                // -----------
        -:  376:
        -:  377:                /**
        -:  378:                 * @param difference_type d
        -:  379:                 * @return iterator to current position - d
        -:  380:                 */
function _ZN8my_dequeIiSaIiEE8iteratormIEl called 32 returned 100% blocks executed 80%
       32:  381:                iterator& operator -= (difference_type d) {
        -:  382:                    // <your code>
       32:  383:                    _index -= d;
       32:  384:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       32:  385:                    return *this;}};
        -:  386:
        -:  387:    public:
        -:  388:        // --------------
        -:  389:        // const_iterator
        -:  390:        // --------------
        -:  391:
        -:  392:        class const_iterator {
        -:  393:            public:
        -:  394:                // --------
        -:  395:                // typedefs
        -:  396:                // --------
        -:  397:
        -:  398:                typedef          std::bidirectional_iterator_tag iterator_category;
        -:  399:                typedef typename my_deque::value_type            value_type;
        -:  400:                typedef typename my_deque::difference_type       difference_type;
        -:  401:                typedef typename my_deque::const_pointer         pointer;
        -:  402:                typedef typename my_deque::const_reference       reference;
        -:  403:
        -:  404:            public:
        -:  405:                // -----------
        -:  406:                // operator ==
        -:  407:                // -----------
        -:  408:
        -:  409:                /**
        -:  410:                 * @param const_iterator lhs
        -:  411:                 * @param difference_type rhs
        -:  412:                 * @return true if lhs == rhs, false otherwise
        -:  413:                 */
function _ZeqRKN8my_dequeIiSaIiEE14const_iteratorES4_ called 20706 returned 100% blocks executed 100%
    20706:  414:                friend bool operator == (const const_iterator& lhs, const const_iterator& rhs) {
        -:  415:                    // <your code>
    20706:  416:                    if (lhs._cindex == rhs._cindex){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      110:  417:                        return true;
        -:  418:                    }
    20596:  419:                    return false;
        -:  420:                }
        -:  421:
        -:  422:                /**
        -:  423:                 * @param const_iterator lhs
        -:  424:                 * @param difference_type rhs
        -:  425:                 * @return true if lhs != rhs, false otherwise
        -:  426:                 */
function _ZneRKN8my_dequeIiSaIiEE14const_iteratorES4_ called 20678 returned 100% blocks executed 100%
    20678:  427:                friend bool operator != (const const_iterator& lhs, const const_iterator& rhs) {
    20678:  428:                    return !(lhs == rhs);}
call    0 returned 100%
        -:  429:
        -:  430:                // ----------
        -:  431:                // operator +
        -:  432:                // ----------
        -:  433:
        -:  434:                /**
        -:  435:                 * @param const_iterator lhs
        -:  436:                 * @param difference_type rhs
        -:  437:                 * @return lhs._cindex + rhs
        -:  438:                 */
function _ZplN8my_dequeIiSaIiEE14const_iteratorEl called 12 returned 100% blocks executed 100%
       12:  439:                friend const_iterator operator + (const_iterator lhs, difference_type rhs) {
       12:  440:                    return lhs += rhs;}
call    0 returned 100%
        -:  441:
        -:  442:                // ----------
        -:  443:                // operator -
        -:  444:                // ----------
        -:  445:
        -:  446:                /**
        -:  447:                 * @param const_iterator lhs
        -:  448:                 * @param difference_type rhs
        -:  449:                 * @return lhs._cindex - rhs
        -:  450:                 */
function _ZmiN8my_dequeIiSaIiEE14const_iteratorEl called 6 returned 100% blocks executed 100%
        6:  451:                friend const_iterator operator - (const_iterator lhs, difference_type rhs) {
        6:  452:                    return lhs -= rhs;}
call    0 returned 100%
        -:  453:
        -:  454:            private:
        -:  455:                // ----
        -:  456:                // data
        -:  457:                // ----
        -:  458:
        -:  459:                // <your data>
        -:  460:                const my_deque* _cd;
        -:  461:                size_type _cindex;
        -:  462:
        -:  463:            private:
        -:  464:                // -----
        -:  465:                // valid
        -:  466:                // -----
        -:  467:
function _ZNK8my_dequeIiSaIiEE14const_iterator5validEv called 27284 returned 100% blocks executed 100%
    27284:  468:                bool valid () const {
        -:  469:                    // <your code>
        -:  470:                    if (_cindex >= 0)
    27284:  471:                        return true;
        -:  472:                    return false;
        -:  473:            }
        -:  474:
        -:  475:            public:
        -:  476:                // -----------
        -:  477:                // constructor
        -:  478:                // -----------
        -:  479:
        -:  480:                /**
        -:  481:                 * const_iterator constructor
        -:  482:                 * @param const my_deque d
        -:  483:                 * @param size_type s, index iterator will point to within d
        -:  484:                 * @return const_iterator pointing to const my_deque d at position s
        -:  485:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorC2EPKS1_m called 304 returned 100% blocks executed 75%
      304:  486:                const_iterator (const my_deque* d, size_type s)  :
        -:  487:
        -:  488:                    _cd (d),
      304:  489:                    _cindex (s){
        -:  490:                    // <your code>
      304:  491:                    assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  492:
        -:  493:                // Default copy, destructor, and copy assignment.
        -:  494:                // const_iterator (const const_iterator&);
        -:  495:                // ~const_iterator ();
        -:  496:                // const_iterator& operator = (const const_iterator&);
        -:  497:
        -:  498:                // ----------
        -:  499:                // operator *
        -:  500:                // ----------
        -:  501:
        -:  502:                /**
        -:  503:                 * @return reference, element at _cindex of _cd
        -:  504:                 */
function _ZNK8my_dequeIiSaIiEE14const_iteratordeEv called 26988 returned 100% blocks executed 100%
    26988:  505:                reference operator * () const {
        -:  506:                    // <your code>
        -:  507:                    // dummy is just to be able to compile the skeleton, remove it
    26988:  508:                    return (*_cd)[_cindex];}
call    0 returned 100%
        -:  509:
        -:  510:                // -----------
        -:  511:                // operator ->
        -:  512:                // -----------
        -:  513:
        -:  514:                /**
        -:  515:                 * @return pointer to this object which can be dereferenced as an rvalue
        -:  516:                 */
        -:  517:                pointer operator -> () const {
        -:  518:                    return &**this;}
        -:  519:
        -:  520:                // -----------
        -:  521:                // operator ++
        -:  522:                // -----------
        -:  523:
        -:  524:                /**
        -:  525:                 * Pre-fix ++
        -:  526:                 * @return const_iterator with updated _cindex value
        -:  527:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorppEv called 26924 returned 100% blocks executed 80%
    26924:  528:                const_iterator& operator ++ () {
        -:  529:                    // <your code>
    26924:  530:                    ++_cindex;
    26924:  531:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
    26924:  532:                    return *this;}
        -:  533:
        -:  534:                /**
        -:  535:                 * Post-fix ++
        -:  536:                 * @param int
        -:  537:                 * @return const_iterator this with previous value, but updates _cindex internally
        -:  538:                 */
        -:  539:                const_iterator operator ++ (int) {
        -:  540:                    const_iterator x = *this;
        -:  541:                    ++(*this);
        -:  542:                    assert(valid());
        -:  543:                    return x;}
        -:  544:
        -:  545:                // -----------
        -:  546:                // operator --
        -:  547:                // -----------
        -:  548:
        -:  549:                /**
        -:  550:                 * Pre-fix --
        -:  551:                 * @return const_iterator this, with updated _cindex value
        -:  552:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormmEv called 26 returned 100% blocks executed 80%
       26:  553:                const_iterator& operator -- () {
        -:  554:                    // <your code>
       26:  555:                    --_cindex;
       26:  556:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       26:  557:                    return *this;}
        -:  558:
        -:  559:                /**
        -:  560:                 * Post-fix --
        -:  561:                 * @param int
        -:  562:                 * @return const_iterator this with previous value, but updates _cindex internally
        -:  563:                 */
        -:  564:                const_iterator operator -- (int) {
        -:  565:                    const_iterator x = *this;
        -:  566:                    --(*this);
        -:  567:                    assert(valid());
        -:  568:                    return x;}
        -:  569:
        -:  570:                // -----------
        -:  571:                // operator +=
        -:  572:                // -----------
        -:  573:
        -:  574:                /**
        -:  575:                 * @param difference_type d, the value to be added from const_iterator
        -:  576:                 * @return const_iterator this, with updated _cindex value
        -:  577:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorpLEl called 18 returned 100% blocks executed 80%
       18:  578:                const_iterator& operator += (difference_type d) {
        -:  579:                    // <your code>
       18:  580:                    _cindex+= d;
       18:  581:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       18:  582:                    return *this;}
        -:  583:
        -:  584:                // -----------
        -:  585:                // operator -=
        -:  586:                // -----------
        -:  587:
        -:  588:                /**
        -:  589:                 * @param difference_type d, the value to be subtracted from const_iterator
        -:  590:                 * @return const_iterator this, with updated _cindex value
        -:  591:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormIEl called 12 returned 100% blocks executed 80%
       12:  592:                const_iterator& operator -= (difference_type d) {
        -:  593:                    // <your code>
       12:  594:                    _cindex-=d;
       12:  595:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       12:  596:                    return *this;}};
        -:  597:
        -:  598:    public:
        -:  599:        // ------------
        -:  600:        // constructors
        -:  601:        // ------------
        -:  602:
        -:  603:        /**
        -:  604:         * my_deque constructor
        -:  605:         * @param allocator_type a, optional specification of an allocator for specific types of elements
        -:  606:         * @return my_deque, empty
        -:  607:         */
function _ZN8my_dequeIiSaIiEEC2ERKS0_ called 132 returned 100% blocks executed 75%
      132:  608:        explicit my_deque (const allocator_type& a = allocator_type()) :
        -:  609:
      132:  610:                 _a (a) {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
      132:  611:                    _b = 0;
      132:  612:                    _e = 0;
      132:  613:                    OUTER_SIZE = 1;
      132:  614:                    outer_b = _balloc.allocate(OUTER_SIZE);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      132:  615:                    outer_e = outer_b+OUTER_SIZE;
      132:  616:                    outer_b[0] = _a.allocate(INNER_SIZE);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      132:  617:                    _size = 0;
      132:  618:                    _bstart = 0;
      132:  619:                    _estart = 0;
      132:  620:                    int begin_index = (capacity() - size()) / 2;
call    0 returned 100%
call    1 returned 100%
      132:  621:                    int end_index = (capacity() + size()) / 2;
call    0 returned 100%
call    1 returned 100%
      132:  622:                    int outerbegin = begin_index/INNER_SIZE;
      132:  623:                    int outerend = end_index/INNER_SIZE;
        -:  624:                    // _bstart = outerbegin;
        -:  625:                    // _estart = outerend;
      132:  626:                    _b = &outer_b[outerbegin][begin_index];
      132:  627:                    _e = &outer_b[outerend][end_index];
      132:  628:                    _offset = begin_index;
        -:  629:                    
      132:  630:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  631:
        -:  632:        /**
        -:  633:         * my_deque constructor
        -:  634:         * @param size_type s, the size of my_deque
        -:  635:         * @param const_reference v, an optional value to be written in each index
        -:  636:         * @return my_deque containing size s, and optional value v
        -:  637:         */
function _ZN8my_dequeIiSaIiEEC2EmRKiRKS0_ called 136 returned 100% blocks executed 81%
      136:  638:        explicit my_deque (size_type s, const_reference v = value_type(), const allocator_type& a = allocator_type()) :
        -:  639:
      136:  640:            _a (a) {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:  641:
      136:  642:            OUTER_SIZE = 1;
      136:  643:            outer_b = _balloc.allocate(OUTER_SIZE*sizeof(pointer));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      136:  644:            outer_e = outer_b+OUTER_SIZE;
      136:  645:            outer_b[0] = _a.allocate(INNER_SIZE);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      136:  646:            _size = 0;  
        -:  647:
        -:  648:            // _bstart = 0;
        -:  649:            // _estart = 0;
      136:  650:            _offset = 0;
      136:  651:            _b = 0;
      136:  652:            _e = 0;
        -:  653:
        -:  654:            // std::cout<<"begin " << *begin() << std::endl;
        -:  655:            // std::cout<<"end " << *end() << std::endl;
        -:  656:
        -:  657:            // std::cout<<"_b " << *_b << std::endl;
        -:  658:            // std::cout<<"_e " << *_e << std::endl;
        -:  659:            //Need something to handle s being bigger than 100 (aka INNER_SIZE)
        -:  660:
        -:  661:            //std::cout << "intial size" << s << std::endl;
        -:  662:
      320:  663:            while (s >= capacity()){
call    0 returned 100%
branch  1 taken 26%
branch  2 taken 74% (fallthrough)
        -:  664:                 //std::cout << "intial capacity" << capacity() << std::endl;
       48:  665:                resize(3*capacity());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  666:
        -:  667:            }
        -:  668:
        -:  669:            
        -:  670:
        -:  671:            //std::cout << "out of while loop" << std::endl;
      136:  672:            _size = s;  //move below resize calls to avoid issues when resizing
        -:  673:
        -:  674:            //std::cout<< "s " << size() << std::endl;
        -:  675:            //std::cout <<"edn" << *end() << std::endl;
        -:  676:
        -:  677:            //Set _b & _e
      136:  678:            int begin_index = (capacity() - size()) / 2;
call    0 returned 100%
call    1 returned 100%
      136:  679:            int end_index = (capacity() + size()) / 2;
call    0 returned 100%
call    1 returned 100%
        -:  680:
      136:  681:            _offset = begin_index;
        -:  682:
        -:  683:            //std::cout<<"begin_index " << begin_index << std::endl;
        -:  684:            //std::cout<<"end_index " << end_index << std::endl;
        -:  685:
      136:  686:            int outerbegin = begin_index/INNER_SIZE;
      136:  687:            int outerend = end_index/INNER_SIZE;
        -:  688:            // _bstart = outerbegin;
        -:  689:            // _estart = outerend;
        -:  690:
        -:  691:            //std::cout<<"outerbegin " << outerbegin << std::endl;
        -:  692:            //std::cout<<"outerend " << outerend << std::endl;
        -:  693:
      136:  694:            _b = &outer_b[outerbegin][begin_index];
        -:  695:           // std::cout<<"_b " << *_b << std::endl;
      136:  696:            _e = &outer_b[outerend][end_index];
        -:  697:
        -:  698:            
        -:  699:            
        -:  700:            
        -:  701:            //std::cout<<"_e " << *_e << std::endl;
        -:  702:
        -:  703:           // std::cout<<"offset " << _offset << std::endl;
        -:  704:
        -:  705:           // std::cout<<"begin " << *begin() << std::endl;
        -:  706:           // std::cout<<"end " << *end() << std::endl;
        -:  707:
      136:  708:            uninitialized_fill(_a, begin(), end(), v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        -:  709:            //std::cout << "after fill" << std::endl;
      136:  710:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  711:
        -:  712:        /**
        -:  713:         * my_deque constructor
        -:  714:         * @param my_deque that, the object to be assigned to *this
        -:  715:         * @return my_deque containing a copy of that
        -:  716:         */
function _ZN8my_dequeIiSaIiEEC2ERKS1_ called 24 returned 100% blocks executed 83%
       24:  717:        my_deque (const my_deque& that) : 
        -:  718:
       24:  719:            _a (that._a) {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:  720:
       24:  721:            OUTER_SIZE = that.OUTER_SIZE;
        -:  722:
        -:  723:            //std::cout << "outersize " << OUTER_SIZE << std::endl;
       24:  724:            outer_b = _balloc.allocate(OUTER_SIZE);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      256:  725:            for (int i = 0; i < OUTER_SIZE; ++i)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  726:            {
      232:  727:                outer_b[i] = _a.allocate(INNER_SIZE);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  728:            }
       24:  729:            _size = that.size();
call    0 returned 100%
        -:  730:
        -:  731:            //std::cout<< "s " << size() << std::endl;
        -:  732:            //std::cout <<"edn" << *end() << std::endl;
        -:  733:
        -:  734:            //Set _b & _e
       24:  735:            int begin_index = (capacity() - size()) / 2;
call    0 returned 100%
call    1 returned 100%
       24:  736:            int end_index = (capacity() + size()) / 2;
call    0 returned 100%
call    1 returned 100%
        -:  737:
       24:  738:            _offset = begin_index;
        -:  739:
        -:  740:            //std::cout<<"begin_index " << begin_index << std::endl;
        -:  741:            //std::cout<<"end_index " << end_index << std::endl;
        -:  742:
       24:  743:            int outerbegin = begin_index/INNER_SIZE;
       24:  744:            int outerend = end_index/INNER_SIZE;
        -:  745:            // _bstart = outerbegin;
        -:  746:            // _estart = outerend;
        -:  747:
        -:  748:            //std::cout<<"outerbegin " << outerbegin << std::endl;
        -:  749:            //std::cout<<"outerend " << outerend << std::endl;
        -:  750:
       24:  751:            _b = &outer_b[outerbegin][begin_index];
        -:  752:            //std::cout<<"_b " << *_b << std::endl;
       24:  753:            _e = &outer_b[outerend][end_index];
        -:  754:
        -:  755:            
        -:  756:            //std::cout<<"_e " << *_e << std::endl;
        -:  757:            
        -:  758:
        -:  759:            //std::cout<<"offset " << _offset << std::endl;
        -:  760:
        -:  761:            //std::cout<<"begin " << *begin() << std::endl;
        -:  762:            //std::cout<<"end " << *end() << std::endl;
        -:  763:
        -:  764:
        -:  765:
        -:  766:
       24:  767:            uninitialized_copy(_a, that.begin(), that.end(), begin());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
       24:  768:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       24:  769:        }
        -:  770:
        -:  771:        // ----------
        -:  772:        // destructor
        -:  773:        // ----------
        -:  774:
        -:  775:        /**
        -:  776:         * Destroys the my_deque element 
        -:  777:         */
function _ZN8my_dequeIiSaIiEED2Ev called 292 returned 100% blocks executed 91%
      292:  778:        ~my_deque () {
        -:  779:    
     1176:  780:            for (int i = 0; i < OUTER_SIZE; ++i)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  781:            {
        -:  782:                /* code */
      884:  783:                _a.deallocate(outer_b[i], INNER_SIZE);
call    0 returned 100%
        -:  784:            }
      292:  785:            _balloc.deallocate(outer_b, OUTER_SIZE);
call    0 returned 100%
      292:  786:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
call    5 returned 100%
        -:  787:
        -:  788:        // ----------
        -:  789:        // operator =
        -:  790:        // ----------
        -:  791:
        -:  792:        /**
        -:  793:         * Assigns rhs to *this
        -:  794:         * @param my_deque& rhs
        -:  795:         * @return my_deque *this, which was previously my_deque rhs
        -:  796:         */
function _ZN8my_dequeIiSaIiEEaSERKS1_ called 18 returned 100% blocks executed 77%
       18:  797:        my_deque& operator = (const my_deque& rhs) {
        -:  798:            // <your code>
        -:  799:            //*this = my_deque(rhs);
       18:  800:            if (*this == rhs)
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
        4:  801:                return *this;
       14:  802:            if (rhs.size() == size())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
        8:  803:                std::copy(rhs.begin(), rhs.end(), begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        6:  804:            else if (rhs.size() < size()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        2:  805:                std::copy(rhs.begin(), rhs.end(), begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        2:  806:                _size = rhs.size();}
call    0 returned 100%
        4:  807:            else if (rhs.size() <= capacity()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4:  808:                _size = rhs.size();
call    0 returned 100%
        4:  809:                _e = &*std::copy(rhs.begin(), rhs.begin() + rhs.size(), begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 never executed
        -:  810:                
        -:  811:                //_e = &*uninitialized_copy(_a, rhs.begin() + size(), rhs.end(), end());
        -:  812:            }
        -:  813:            else {
    #####:  814:                clear();
call    0 never executed
    #####:  815:                reserve(rhs.size());
call    0 never executed
call    1 never executed
    #####:  816:                _e = &*uninitialized_copy(_a, rhs.begin(), rhs.end(), begin());}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
       14:  817:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       14:  818:            return *this;
        -:  819:}
        -:  820:
        -:  821:        // -----------
        -:  822:        // operator []
        -:  823:        // -----------
        -:  824:
        -:  825:        /**
        -:  826:         * @param size_type index, the index requested
        -:  827:         * @return the reference to that index
        -:  828:         */
function _ZN8my_dequeIiSaIiEEixEm called 54032 returned 100% blocks executed 25%
    54032:  829:         reference operator [] (size_type index) {
        -:  830:            // This needs to be capacity - beginning padding
        -:  831:            //std::cout << "capacity " << capacity() << std::endl;
    54032:  832:            if (index > (_size) || (index < 0))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  833:                throw std::out_of_range("Deque: []");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  834:
        -:  835:            // Do mod & division to find index, from _b index
    54032:  836:            int outer_b_index = (index + _offset )/INNER_SIZE;
        -:  837:
        -:  838:            
    54032:  839:            int inner_index = (index + _offset)%INNER_SIZE;
        -:  840:            
        -:  841:
    54032:  842:            return outer_b[outer_b_index][inner_index];
        -:  843:        }
        -:  844:
        -:  845:        /**
        -:  846:         * @param size_type index, the index requested
        -:  847:         * @return the const_reference to that index
        -:  848:         */
        -:  849:         
function _ZNK8my_dequeIiSaIiEEixEm called 26988 returned 100% blocks executed 29%
    26988:  850:         const_reference operator [] (size_type index) const {
    26988:  851:            if (index > (_size ) || (index < 0))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  852:                throw std::out_of_range("Deque: const []");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    26988:  853:             return const_cast<my_deque&>(*this)[index];}
call    0 returned 100%
        -:  854:
        -:  855:        // --
        -:  856:        // at
        -:  857:        // --
        -:  858:
        -:  859:        /**
        -:  860:         * @param size_type index, the index requested
        -:  861:         * @return the reference to that index
        -:  862:         */
function _ZN8my_dequeIiSaIiEE2atEm called 120 returned 98% blocks executed 70%
      120:  863:        reference at (size_type index) {
      120:  864:            if (index >= (_size ) || (index < 0))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        2:  865:                throw std::out_of_range("Deque: at");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 returned 0%
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
      118:  866:            return *(begin()+index);}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  867:
        -:  868:        /**
        -:  869:         * @param size_type index, the index requested
        -:  870:         * @return the const_reference to that index
        -:  871:         */
        -:  872:        const_reference at (size_type index) const {
        -:  873:            return const_cast<my_deque*>(this)->at(index);}
        -:  874:
        -:  875:        // ----
        -:  876:        // back
        -:  877:        // ----
        -:  878:
        -:  879:        /**
        -:  880:         * @return reference, the last element of my_deque
        -:  881:         */
function _ZN8my_dequeIiSaIiEE4backEv called 16 returned 100% blocks executed 89%
       16:  882:        reference back () {
       16:  883:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       16:  884:            return *(end() - 1);}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  885:
        -:  886:        /**
        -:  887:         * @return const_reference, the last element of my_deque
        -:  888:         */
        -:  889:        const_reference back () const {
        -:  890:            return const_cast<my_deque*>(this)->back();}
        -:  891:
        -:  892:        // -----
        -:  893:        // begin
        -:  894:        // -----
        -:  895:
        -:  896:        /**
        -:  897:         * @return iterator to begining of my_deque
        -:  898:         */
function _ZN8my_dequeIiSaIiEE5beginEv called 418 returned 100% blocks executed 100%
      418:  899:        iterator begin () {
      418:  900:            return iterator(this, 0);
call    0 returned 100%
        -:  901:        }
        -:  902:
        -:  903:        /**
        -:  904:         * @return const_iterator to beginning of my_deque
        -:  905:         */
function _ZNK8my_dequeIiSaIiEE5beginEv called 196 returned 100% blocks executed 100%
      196:  906:        const_iterator begin () const {
        -:  907:            // <your code>
      196:  908:            return const_iterator(this,0 );}
call    0 returned 100%
        -:  909:
        -:  910:
        -:  911:
        -:  912:        //----------
        -:  913:        // capacity
        -:  914:        // ---------
        -:  915:
        -:  916:        /**
        -:  917:         * @return the full capacity of my_deque
        -:  918:         */
        -:  919:
function _ZNK8my_dequeIiSaIiEE8capacityEv called 1878 returned 100% blocks executed 100%
     1878:  920:        size_type capacity () const {
        -:  921:            //std::cout << "capacity " << INNER_SIZE*OUTER_SIZE << std::endl;
     1878:  922:            return INNER_SIZE*OUTER_SIZE;}
        -:  923:
        -:  924:        // -----
        -:  925:        // clear
        -:  926:        // -----
        -:  927:
        -:  928:        /**
        -:  929:         * Removes all elements of my_deque
        -:  930:         * Does not deallocate pointer to my_deque
        -:  931:         */
function _ZN8my_dequeIiSaIiEE5clearEv called 8 returned 100% blocks executed 83%
        8:  932:        void clear () {
        8:  933:            resize(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  934:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  935:
        -:  936:        // -----
        -:  937:        // empty
        -:  938:        // -----
        -:  939:
        -:  940:        /**
        -:  941:         * @return true if size is 0, aka my_deque is empty
        -:  942:         */
function _ZNK8my_dequeIiSaIiEE5emptyEv called 72 returned 100% blocks executed 100%
       72:  943:        bool empty () const {
       72:  944:            return !size();}
call    0 returned 100%
        -:  945:
        -:  946:        // ---
        -:  947:        // end
        -:  948:        // ---
        -:  949:
        -:  950:        /**
        -:  951:         * @return iterator to end of my_deque
        -:  952:         */
function _ZN8my_dequeIiSaIiEE3endEv called 194 returned 100% blocks executed 100%
      194:  953:        iterator end () {
        -:  954:            // <your code>
      194:  955:            return iterator(this, _size );}
call    0 returned 100%
        -:  956:
        -:  957:        /**
        -:  958:         * @return const_iterator to end of my_deque
        -:  959:         */ 
function _ZNK8my_dequeIiSaIiEE3endEv called 108 returned 100% blocks executed 100%
      108:  960:        const_iterator end () const {
        -:  961:            // <your code>
      108:  962:            return const_iterator(this, _size );}
call    0 returned 100%
        -:  963:
        -:  964:        // -----
        -:  965:        // erase
        -:  966:        // -----
        -:  967:
        -:  968:        /**
        -:  969:         * @param iterator it, the position of element to be removed
        -:  970:         * @return iterator to current position of updated element
        -:  971:         */
function _ZN8my_dequeIiSaIiEE5eraseENS1_8iteratorE called 6 returned 100% blocks executed 94%
        6:  972:        iterator erase (iterator it) {
        -:  973:            // <your code>
        6:  974:            auto curr = it;
        6:  975:            auto next = ++it;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  976:            auto end = iterator(this, _size);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20:  977:            while(next != end){
call    0 returned 100%
branch  1 taken 57%
branch  2 taken 43% (fallthrough)
        8:  978:                *curr = *next;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        8:  979:                ++next;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  980:                ++curr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  981:            }
        6:  982:            pop_back();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  983:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        6:  984:            return curr;}
        -:  985:
        -:  986:        // -----
        -:  987:        // front
        -:  988:        // -----
        -:  989:
        -:  990:        /**
        -:  991:         * @return refrence of the beginning of my_deque
        -:  992:         */
function _ZN8my_dequeIiSaIiEE5frontEv called 20 returned 100% blocks executed 88%
       20:  993:        reference front () {
       20:  994:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       20:  995:            return *begin();}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  996:
        -:  997:        /**
        -:  998:         * @return const_reference of the beginning of my_deque
        -:  999:         */
        -: 1000:        const_reference front () const {
        -: 1001:            return const_cast<my_deque*>(this)->front();}
        -: 1002:
        -: 1003:        // ------
        -: 1004:        // insert
        -: 1005:        // ------
        -: 1006:
        -: 1007:        /**
        -: 1008:         * @param iterator it, the position
        -: 1009:         * @param const_reference v, reference to be inserted
        -: 1010:         * @return iterator to new element
        -: 1011:         */
function _ZN8my_dequeIiSaIiEE6insertENS1_8iteratorERKi called 6 returned 100% blocks executed 79%
        6: 1012:        iterator insert (iterator it, const_reference val) {
        -: 1013:            // <your code>
        6: 1014:            if (it == begin()){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1015:                push_front(val);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1016:                return --it;}
call    0 never executed
branch  1 never executed
branch  2 never executed
        6: 1017:            if (it == end()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1018:                push_back(val);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1019:                return ++it;}
call    0 never executed
branch  1 never executed
branch  2 never executed
        6: 1020:            auto curr = it;
        6: 1021:            auto next = ++it;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 1022:            auto end = iterator(this, _size);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 1023:            auto tmp = *it;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       32: 1024:            while(next != end){
call    0 returned 100%
branch  1 taken 77%
branch  2 taken 23% (fallthrough)
       20: 1025:                tmp = *next;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20: 1026:                *next = *curr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       20: 1027:                ++next;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20: 1028:                ++curr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1029:            }
        6: 1030:            push_back(tmp);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 1031:            --it;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 1032:            *it = val;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1033:
        6: 1034:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1035:
        -: 1036:
        6: 1037:            return it;
        -: 1038:}
        -: 1039:
        -: 1040:        // ---
        -: 1041:        // pop
        -: 1042:        // ---
        -: 1043:
        -: 1044:        /**
        -: 1045:         * Removes last element of my_deque
        -: 1046:         */
function _ZN8my_dequeIiSaIiEE8pop_backEv called 16 returned 100% blocks executed 71%
       16: 1047:        void pop_back () {
       16: 1048:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1049:            //resize(size() - 1);
       16: 1050:            --_e;
       16: 1051:            --_size;
       16: 1052:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1053:
        -: 1054:        /**
        -: 1055:         * Removes the first element of my_deque
        -: 1056:         */
function _ZN8my_dequeIiSaIiEE9pop_frontEv called 6 returned 100% blocks executed 75%
        6: 1057:        void pop_front () {
        -: 1058:            // <your code>
        6: 1059:            ++_offset;
        6: 1060:            --_b;
        6: 1061:            --_size;
        6: 1062:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1063:
        -: 1064:        // ----
        -: 1065:        // push
        -: 1066:        // ----
        -: 1067:
        -: 1068:        /**
        -: 1069:         * @param const_reference v, a reference to be added to the back of deque
        -: 1070:         */
function _ZN8my_dequeIiSaIiEE9push_backERKi called 916 returned 100% blocks executed 70%
      916: 1071:        void push_back (const_reference v) {
      916: 1072:            if (_size+_offset < capacity()){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      916: 1073:                ++_size;
      916: 1074:                *_e = v;
        -: 1075:               // std::cout << "pushed value: " << v << std::endl;
      916: 1076:                ++_e;
        -: 1077:            }
        -: 1078:            else{
    #####: 1079:                resize(_size+_offset);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1080:            }
        -: 1081:
        -: 1082:
      916: 1083:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1084:
        -: 1085:        /**
        -: 1086:         * @param const_reference v, a reference to be added to the front of deque
        -: 1087:         */
function _ZN8my_dequeIiSaIiEE10push_frontERKi called 58 returned 100% blocks executed 86%
       58: 1088:        void push_front (const_reference v) {
        -: 1089:            // <your code>
       58: 1090:            if (_size < capacity()){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       58: 1091:                ++_size;
       58: 1092:                --_b;
       58: 1093:                --_offset;
       58: 1094:                *_b = v;
        -: 1095:            }
       58: 1096:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1097:
        -: 1098:        // ------
        -: 1099:        // resize
        -: 1100:        // ------
        -: 1101:
        -: 1102:        /**
        -: 1103:         * @param size_type s
        -: 1104:         * @param const_reference v, an optional value to be written, which we do not utilize
        -: 1105:         */
function _ZN8my_dequeIiSaIiEE6resizeEmRKi called 70 returned 100% blocks executed 92%
       70: 1106:        void resize (size_type s, const_reference v = value_type()) {
        -: 1107:            //std::cout << size() << std::endl;
        -: 1108:            //std::cout << s << std::endl;
        -: 1109:            //std::cout << capacity() << std::endl;
        -: 1110:            // if (s == size())
        -: 1111:            //     return;
       70: 1112:            if (s < size()){
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
       10: 1113:                _e = &*destroy(_a, begin() + s, end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 never executed
       10: 1114:                _size = s;
        -: 1115:            }
        -: 1116:                
       60: 1117:            else if (s < capacity()){
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
       12: 1118:                _size = s;
       12: 1119:                int begin_index = (capacity() - size()) / 2;
call    0 returned 100%
call    1 returned 100%
       12: 1120:                int end_index = (capacity() + size()) / 2;
call    0 returned 100%
call    1 returned 100%
        -: 1121:
       12: 1122:                _offset = begin_index;
        -: 1123:
        -: 1124:                //std::cout<<"begin_index " << begin_index << std::endl;
        -: 1125:                //std::cout<<"end_index " << end_index << std::endl;
        -: 1126:
       12: 1127:                int outerbegin = begin_index/INNER_SIZE;
       12: 1128:                int outerend = end_index/INNER_SIZE;
        -: 1129:                // _bstart = outerbegin;
        -: 1130:                // _estart = outerend;
        -: 1131:
        -: 1132:                //std::cout<<"outerbegin " << outerbegin << std::endl;
        -: 1133:                //std::cout<<"outerend " << outerend << std::endl;
        -: 1134:
       12: 1135:                _b = &outer_b[outerbegin][begin_index];
        -: 1136:                //std::cout<<"_b " << *_b << std::endl;
       12: 1137:                _e = &outer_b[outerend][end_index];
       82: 1138:                return;
        -: 1139:                // std::cout<<"dfsfsd" <<std::endl;                
        -: 1140:                // std::cout<<"begin" << *begin() << std::endl;
        -: 1141:                // std::cout <<"edn" << *end() << std::endl;
        -: 1142:
        -: 1143:                // //_e = &*uninitialized_fill(_a, end(), begin() + s, v);
        -: 1144:                // std::cout<<"dfsfsd" <<std::endl;                
        -: 1145:            }
        -: 1146:            else {
        -: 1147:                //std::cout << "else reserve" << std::endl;
       48: 1148:                reserve(std::max(2 * size(), s));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 1149:                //resize(s, v);
        -: 1150:            }
       58: 1151:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1152:
        -: 1153:        //-----------
        -: 1154:        // reserve
        -: 1155:        // ---------
        -: 1156:
        -: 1157:        /** 
        -: 1158:         * Allocates new space for resize method
        -: 1159:         * @param size_type c
        -: 1160:         */
function _ZN8my_dequeIiSaIiEE7reserveEm called 48 returned 100% blocks executed 94%
       48: 1161:         void reserve (size_type c) {
        -: 1162:            //std::cout << "reserve" << std::endl;
       48: 1163:            pointer* tmp = _balloc.allocate(OUTER_SIZE*3*sizeof(pointer));
call    0 returned 100%
      240: 1164:            for(int i = 0; i < OUTER_SIZE; ++i){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      192: 1165:                tmp[OUTER_SIZE+i] = outer_b[i];
        -: 1166:            }
        -: 1167:
        -: 1168:            // _bstart = ((_bstart - *outer_b) + OUTER_SIZE);
        -: 1169:            // _estart = ((_estart - *outer_b) + OUTER_SIZE);
        -: 1170:
       48: 1171:            _balloc.deallocate(outer_b, OUTER_SIZE);
call    0 returned 100%
        -: 1172:
       48: 1173:            outer_b = tmp;
        -: 1174:
       48: 1175:            OUTER_SIZE*=3;
        -: 1176:
      624: 1177:            for (int i = 0; i < OUTER_SIZE; ++i)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 1178:            {
      576: 1179:                if ((i >= OUTER_SIZE/3) && (i < 2*OUTER_SIZE/3)){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
      192: 1180:                    continue;
        -: 1181:                }
      384: 1182:                outer_b[i] = _a.allocate(INNER_SIZE);
call    0 returned 100%
        -: 1183:            }
       48: 1184:            outer_e = outer_b+OUTER_SIZE;
        -: 1185:            
       48: 1186:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 1187:
        -: 1188:        // ----
        -: 1189:        // size
        -: 1190:        // ----
        -: 1191:
        -: 1192:        /**
        -: 1193:         * @return the size of my_deque object
        -: 1194:         */
function _ZNK8my_dequeIiSaIiEE4sizeEv called 1068 returned 100% blocks executed 100%
     1068: 1195:        size_type size () const {
        -: 1196:            // <your code>
        -: 1197:            //std::cout << "size "<< _size << std::endl;
     1068: 1198:            return _size;}
        -: 1199:
        -: 1200:        // ----
        -: 1201:        // swap
        -: 1202:        // ----
        -: 1203:
        -: 1204:        /**
        -: 1205:         * Assigns all elements rhs to lhs and vice versa
        -: 1206:         * @param my_deque rhs
        -: 1207:         */
function _ZN8my_dequeIiSaIiEE4swapERS1_ called 2 returned 100% blocks executed 73%
        2: 1208:        void swap (my_deque& rhs) {
        -: 1209:            // <your code>
        2: 1210:            my_deque tmp(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1211:            *this = rhs;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1212:            rhs = tmp;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1213:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
call    5 never executed
        -: 1214:
        -: 1215:
        -: 1216:            };
        -: 1217:
        -: 1218:#endif // Deque_h
